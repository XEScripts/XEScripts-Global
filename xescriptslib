

local GuiLib = {}
GuiLib.__index = GuiLib

-- Сервисы
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Константы
local DEFAULT_THEME = {
    Background = Color3.fromRGB(20, 20, 20),
    Window = Color3.fromRGB(28, 28, 28),
    Accent = Color3.fromRGB(100, 160, 255),
    Element = Color3.fromRGB(45, 45, 45),
    Text = Color3.fromRGB(235, 235, 235),
    Font = Enum.Font.Gotham,
    CornerRadius = 8,
    Shadow = true
}

local TWEEN_INFO = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

-- Вспомогательные функции
local function safeCall(callback, ...)
    local success, result = pcall(callback, ...)
    if not success then
        warn("[GuiLib] Error:", result)
    end
    return success, result
end

local function isFileApiAvailable()
    return pcall(function()
        return writefile and readfile and isfile and makefolder
    end)
end

local uidCounter = 0
local function generateId(prefix)
    uidCounter = uidCounter + 1
    return string.format("%s_%d_%d", prefix or "element", uidCounter, tick())
end

-- Менеджер конфигураций
local ConfigManager = {
    folder = "GuiLib_Configs",
    data = {}
}

function ConfigManager:ensureFolder()
    if isFileApiAvailable() then
        safeCall(function()
            if not isfolder(self.folder) and makefolder then
                makefolder(self.folder)
            end
        end)
    end
end

function ConfigManager:save(name)
    if not name then return false, "No config name provided" end
    
    local path = self.folder .. "/" .. name .. ".json"
    local encoded = HttpService:JSONEncode(self.data)
    
    if writefile then
        return safeCall(writefile, path, encoded)
    end
    return false, "File API not available"
end

function ConfigManager:load(name)
    if not name then return false, "No config name provided" end
    
    local path = self.folder .. "/" .. name .. ".json"
    
    if isfile and isfile(path) then
        local content = readfile(path)
        local success, parsed = safeCall(HttpService.JSONDecode, HttpService, content)
        
        if success and type(parsed) == "table" then
            self.data = parsed
            return true
        end
        return false, "Failed to parse config"
    end
    return false, "Config file not found"
end

ConfigManager:ensureFolder()

-- Реестры элементов
local registries = {
    toggles = {},
    sliders = {},
    dropdowns = {},
    colorpickers = {},
    keybinds = {},
    textboxes = {}
}

function GuiLib:applyConfig()
    for id, value in pairs(ConfigManager.data) do
        for registryName, registry in pairs(registries) do
            if registry[id] then
                safeCall(registry[id].set, value)
                break
            end
        end
    end
end

function GuiLib:saveValue(id, value)
    ConfigManager.data[id] = value
end

-- Анимации
local function tweenProperty(instance, property, targetValue)
    local tween = TweenService:Create(instance, TWEEN_INFO, {[property] = targetValue})
    tween:Play()
    return tween
end

-- Основные компоненты
function GuiLib:createWindow(options)
    options = options or {}
    local player = Players.LocalPlayer
    assert(player, "Must be executed from a LocalScript")

    -- Настройки окна
    local config = {
        title = options.Title or "GuiLib Pro",
        size = options.Size or UDim2.new(0, 600, 0, 400),
        position = options.Position or UDim2.new(0.5, -300, 0.5, -200),
        theme = table.clone(DEFAULT_THEME)
    }
    
    -- Применение кастомной темы
    if options.Theme then
        for key, value in pairs(options.Theme) do
            config.theme[key] = value
        end
    end

    -- Создание интерфейса
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = generateId("GuiLibScreen")
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = player:WaitForChild("PlayerGui")

    -- Основной контейнер
    local mainContainer = Instance.new("Frame")
    mainContainer.Size = config.size
    mainContainer.Position = config.position
    mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    mainContainer.BackgroundColor3 = config.theme.Window
    mainContainer.BorderSizePixel = 0
    mainContainer.ClipsDescendants = true
    mainContainer.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, config.theme.CornerRadius)
    corner.Parent = mainContainer

    -- Заголовок
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 36)
    titleBar.BackgroundColor3 = config.theme.Background
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainContainer

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, config.theme.CornerRadius)
    titleCorner.Parent = titleBar

    local titleText = Instance.new("TextLabel")
    titleText.Size = UDim2.new(1, -40, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = config.title
    titleText.TextColor3 = config.theme.Text
    titleText.Font = config.theme.Font
    titleText.TextSize = 16
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar

    -- Кнопка закрытия
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 24, 0, 24)
    closeButton.Position = UDim2.new(1, -30, 0, 6)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
    closeButton.BorderSizePixel = 0
    closeButton.Text = "×"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = 16
    closeButton.Parent = titleBar

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeButton

    -- Контейнер вкладок
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, 0, 0, 34)
    tabContainer.Position = UDim2.new(0, 0, 0, 36)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = mainContainer

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    tabLayout.Parent = tabContainer

    -- Контейнер контента
    local contentContainer = Instance.new("Frame")
    contentContainer.Size = UDim2.new(1, -10, 1, -80)
    contentContainer.Position = UDim2.new(0, 5, 0, 78)
    contentContainer.BackgroundTransparency = 1
    contentContainer.Parent = mainContainer

    -- Логика перетаскивания
    local dragging, dragStart, startPos
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainContainer.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Логика закрытия
    closeButton.MouseButton1Click:Connect(function()
        tweenProperty(mainContainer, "Size", UDim2.new(0, 0, 0, 0))
        task.wait(0.2)
        screenGui:Destroy()
    end)

    -- Объект окна
    local window = {
        screenGui = screenGui,
        container = mainContainer,
        theme = config.theme,
        tabs = {},
        currentTab = nil
    }

    -- Методы окна
    function window:addTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.BackgroundColor3 = config.theme.Element
        tabButton.BorderSizePixel = 0
        tabButton.Text = name
        tabButton.TextColor3 = config.theme.Text
        tabButton.Font = config.theme.Font
        tabButton.TextSize = 14
        tabButton.Parent = tabContainer

        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 6)
        tabCorner.Parent = tabButton

        local tabFrame = Instance.new("ScrollingFrame")
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabFrame.ScrollBarThickness = 6
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.Parent = contentContainer

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 8)
        layout.Parent = tabFrame

        local padding = Instance.new("UIPadding")
        padding.PaddingTop = UDim.new(0, 6)
        padding.PaddingLeft = UDim.new(0, 6)
        padding.PaddingRight = UDim.new(0, 6)
        padding.Parent = tabFrame

        -- Обновление размера канваса
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
        end)

        local tabObject = {
            name = name,
            frame = tabFrame,
            button = tabButton,
            elements = {}
        }

        -- Переключение вкладок
        tabButton.MouseButton1Click:Connect(function()
            if window.currentTab == tabObject then return end
            
            -- Скрыть текущую вкладку
            if window.currentTab then
                window.currentTab.frame.Visible = false
                tweenProperty(window.currentTab.button, "BackgroundColor3", config.theme.Element)
            end
            
            -- Показать новую вкладку
            window.currentTab = tabObject
            tabFrame.Visible = true
            tweenProperty(tabButton, "BackgroundColor3", config.theme.Accent)
        end)

        -- Методы вкладки
        function tabObject:addButton(text, callback)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, 0, 0, 36)
            button.BackgroundColor3 = config.theme.Element
            button.BorderSizePixel = 0
            button.Text = text
            button.TextColor3 = config.theme.Text
            button.Font = config.theme.Font
            button.TextSize = 14
            button.Parent = tabFrame

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = button

            -- Анимации кнопки
            button.MouseEnter:Connect(function()
                tweenProperty(button, "BackgroundColor3", config.theme.Accent:Lerp(Color3.new(1, 1, 1), 0.2))
            end)

            button.MouseLeave:Connect(function()
                tweenProperty(button, "BackgroundColor3", config.theme.Element)
            end)

            button.MouseButton1Click:Connect(function()
                tweenProperty(button, "Size", UDim2.new(0.95, 0, 0, 36))
                task.wait(0.1)
                tweenProperty(button, "Size", UDim2.new(1, 0, 0, 36))
                safeCall(callback)
            end)

            table.insert(self.elements, button)
            return button
        end

        function tabObject:addToggle(text, defaultValue, callback)
            local id = generateId("toggle")
            local state = defaultValue or false

            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(1, 0, 0, 36)
            toggle.BackgroundColor3 = config.theme.Element
            toggle.BorderSizePixel = 0
            toggle.Text = string.format("%s: %s", text, state and "ON" or "OFF")
            toggle.TextColor3 = config.theme.Text
            toggle.Font = config.theme.Font
            toggle.TextSize = 14
            toggle.TextXAlignment = Enum.TextXAlignment.Left
            toggle.Parent = tabFrame

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = toggle

            local indicator = Instance.new("Frame")
            indicator.Size = UDim2.new(0, 20, 0, 20)
            indicator.Position = UDim2.new(1, -26, 0.5, -10)
            indicator.BackgroundColor3 = state and config.theme.Accent or Color3.fromRGB(100, 100, 100)
            indicator.BorderSizePixel = 0
            indicator.Parent = toggle

            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0, 4)
            indicatorCorner.Parent = indicator

            local function setState(value)
                state = value
                toggle.Text = string.format("%s: %s", text, state and "ON" or "OFF")
                tweenProperty(indicator, "BackgroundColor3", state and config.theme.Accent or Color3.fromRGB(100, 100, 100))
                GuiLib:saveValue(id, state)
                if callback then safeCall(callback, state) end
            end

            toggle.MouseButton1Click:Connect(function()
                setState(not state)
            end)

            registries.toggles[id] = { set = setState }
            GuiLib:saveValue(id, state)

            table.insert(self.elements, toggle)
            return { set = setState, get = function() return state end }
        end

        -- Добавь остальные элементы по аналогии...

        -- Активация первой вкладки
        if #window.tabs == 0 then
            tabFrame.Visible = true
            tweenProperty(tabButton, "BackgroundColor3", config.theme.Accent)
            window.currentTab = tabObject
        end

        table.insert(window.tabs, tabObject)
        return tabObject
    end

    -- Методы управления конфигурацией
    function window:saveConfig(name)
        return ConfigManager:save(name)
    end

    function window:loadConfig(name)
        local success, error = ConfigManager:load(name)
        if success then
            GuiLib:applyConfig()
        end
        return success, error
    end

    function window:destroy()
        screenGui:Destroy()
    end

    return window
end

return GuiLib
